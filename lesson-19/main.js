/*







*/
// Kh·ªüi t·∫°o b·∫£n ƒë·ªì H√† N·ªôi:
const maps = L.map("map").setView([21.0285, 105.8542], 13);
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
}).addTo(maps);

// D·ªØ li·ªáu cho c√°c marker (t·ªça ƒë·ªô v√† popup message)
const markers = [
  { lat: 21.0285, lng: 105.8542, message: "H·ªì Ho√†n Ki·∫øm" },
  { lat: 21.0278, lng: 105.8342, message: "LƒÉng ch·ªß t·ªãch H·ªì Ch√≠ Minh" },
  { lat: 21.0379, lng: 105.8342, message: "Ch√πa M·ªôt C·ªôt" },
  { lat: 21.0242, lng: 105.841, message: "Ga Xe L·ª≠a H√† N·ªôi" },
  { lat: 21.0358, lng: 105.8486, message: "Ho√†ng th√†nh ThƒÉng Long" },
];

// T·∫°o icon t√πy ch·ªânh
const customIcon = L.icon({
  iconUrl: "https://raw.githubusercontent.com/xuanphao19/bs-JavaScript/main/assets/XuanPhao.png",
  iconSize: [35, 41],
  iconAnchor: [12, 41],
  popupAnchor: [6, -38],

  // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file shadow (n·∫øu c√≥)
  // shadowUrl: "https://example.com/path/to/your-icon-shadow.png",
  // shadowSize: [41, 41],
  // shadowAnchor: [12, 41],
});
// Th√™m c√°c marker v√†o b·∫£n ƒë·ªì
const mapCity = markers.map((markerData) => {
  const mapPin = [markerData.lat, markerData.lng];
  const marker = L.marker(mapPin, { icon: customIcon }).addTo(maps).bindPopup(markerData.message);
  return { marker: marker, mapPin: mapPin };
});

// // T·∫°o marker target:
const targetMarker = L.marker([21.0358, 105.8486], { icon: customIcon }).addTo(maps).bindPopup("Nguy·ªÖn Ph√°o Th·ªß.");
targetMarker.openPopup();

const zoomCtrl = document.getElementById("zoomButton");
zoomCtrl.addEventListener("click", () => {
  maps.setView(mapCity[4].mapPin, 18);
  mapCity[4].marker.openPopup();
  // targetMarker.openPopup();
});

/* ============================= */

// üü¢üü¢  DOM events in JavaScript ‚≠ê‚≠ê ._latlng.lat

// DOM events l√† g√¨?
/*
DOM events (Document Object Model events) l√† c√°c s·ª± ki·ªán x·∫£y ra trong t√†i li·ªáu web, v√† ch√∫ng cho ph√©p JavaScript t∆∞∆°ng t√°c v·ªõi HTML. DOM events c√≥ th·ªÉ ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi ng∆∞·ªùi d√πng ho·∫∑c b·ªüi tr√¨nh duy·ªát, v√† ch√∫ng cung c·∫•p m·ªôt c√°ch ƒë·ªÉ l√†m cho c√°c trang web tr·ªü n√™n ƒë·ªông v√† t∆∞∆°ng t√°c h∆°n.

D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë DOM events ph·ªï bi·∫øn:

1. **Mouse Events**:
    - `click`: X·∫£y ra khi ng∆∞·ªùi d√πng nh·∫•n v√† th·∫£ n√∫t chu·ªôt.
    - `dblclick`: X·∫£y ra khi ng∆∞·ªùi d√πng nh·∫•p ƒë√∫p v√†o m·ªôt ph·∫ßn t·ª≠.
    - `mousedown`: X·∫£y ra khi ng∆∞·ªùi d√πng nh·∫•n n√∫t chu·ªôt.
    - `mouseup`: X·∫£y ra khi ng∆∞·ªùi d√πng th·∫£ n√∫t chu·ªôt.
    - `mousemove`: X·∫£y ra khi ng∆∞·ªùi d√πng di chuy·ªÉn chu·ªôt qua m·ªôt ph·∫ßn t·ª≠.
    - `mouseover`: X·∫£y ra khi con tr·ªè chu·ªôt di chuy·ªÉn v√†o m·ªôt ph·∫ßn t·ª≠.

2. **Keyboard Events**:
    - `keydown`: X·∫£y ra khi ng∆∞·ªùi d√πng nh·∫•n m·ªôt ph√≠m.
    - `keyup`: X·∫£y ra khi ng∆∞·ªùi d√πng th·∫£ m·ªôt ph√≠m.
    - `keypress`: X·∫£y ra khi ng∆∞·ªùi d√πng nh·∫•n m·ªôt ph√≠m (kh√¥ng c√≤n ƒë∆∞·ª£c khuy·∫øn ngh·ªã s·ª≠ d·ª•ng, n√™n d√πng `keydown` ho·∫∑c `keyup` thay th·∫ø).

3. **Form Events**:
    - `submit`: X·∫£y ra khi ng∆∞·ªùi d√πng g·ª≠i m·ªôt form.
    - `reset`: X·∫£y ra khi ng∆∞·ªùi d√πng ƒë·∫∑t l·∫°i m·ªôt form.
    - `focus`: X·∫£y ra khi m·ªôt ph·∫ßn t·ª≠ nh·∫≠n ƒë∆∞·ª£c focus.
    - `blur`: X·∫£y ra khi m·ªôt ph·∫ßn t·ª≠ m·∫•t focus.
    - `change`: X·∫£y ra khi gi√° tr·ªã c·ªßa m·ªôt ph·∫ßn t·ª≠ form thay ƒë·ªïi.

4. **Window Events**:
    - `load`: X·∫£y ra khi to√†n b·ªô trang v√† t·∫•t c·∫£ c√°c t√†i nguy√™n c·ªßa n√≥ (nh∆∞ h√¨nh ·∫£nh, script) ƒë√£ t·∫£i xong.
    - `unload`: X·∫£y ra khi ng∆∞·ªùi d√πng r·ªùi kh·ªèi trang.
    - `resize`: X·∫£y ra khi k√≠ch th∆∞·ªõc c·ª≠a s·ªï tr√¨nh duy·ªát thay ƒë·ªïi.
    - `scroll`: X·∫£y ra khi ng∆∞·ªùi d√πng cu·ªôn trang.

ƒê·ªÉ x·ª≠ l√Ω c√°c DOM events, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c tr√¨nh x·ª≠ l√Ω s·ª± ki·ªán (event handlers). V√≠ d·ª•:

```javascript
document.getElementById("myButton").addEventListener("click", function() {
    alert("Button clicked!");
});
```

Trong v√≠ d·ª• tr√™n, khi ng∆∞·ªùi d√πng nh·∫•p v√†o n√∫t v·ªõi id `myButton`, m·ªôt c·∫£nh b√°o s·∫Ω hi·ªán l√™n v·ªõi th√¥ng b√°o "Button clicked!".
*/
//‚≠ê Attr Event : Vi·∫øt Event tr·ª±c ti·∫øp v√†o th·∫ª m·ªü c·ªßa th·∫ª HTML
// V√≠ du: <h1 "t√™n s·ª± ki·ªán (B·∫Øt ƒë·∫ßu b·∫±ng on...)" = "function (Th·ª±c hi·ªán h√†nh ƒë·ªông n√†o ƒë√≥)">Attr Event</h1>

//‚≠ê Add event ElementNode:
// ElementNode g·ªçi ƒë·∫øn ph∆∞∆°ng th·ª©c addEventListener (
// ƒê·ªëi s·ªë th·ª© nh·∫•t: T√™n s·ª± ki·ªán.
// ƒê·ªëi s·ªë th·ª© hai: function
//)

// elementNode.onclick = function () {};
// Kh√¥ng linh ho·∫°t

// elementNode.addEventListener("click", (event) => {
//   event.target;
//   console.log(event.target);
// });

// ‚≠ê L√†m vi·ªác v·ªõi input title text

// const inputElement = document.querySelector(".name");
// console.log(inputElement);

// üåª Onchange from event :
// Khi value thay ƒë·ªïi(g·ªçi h√†m khi blur kh·ªèi input)

// inputElement.onchange = (event) => {
//   const target = event.target; // === ElementNode
//   const value = target.value; // Gi√° tr·ªã c·ªßa input element

//   console.log(value);
// };

// üåª Oninput from event :
// Khi value thay ƒë·ªïi(g·ªçi h√†m ngay l·∫≠p t·ª©c)

// inputElement.oninput = (event) => {
//   const target = event.target; // === ElementNode
//   const value = target.value; // Gi√° tr·ªã c·ªßa input element

//   console.log(value);
// };

// ‚≠ê L√†m vi·ªác v·ªõi input title checkbox

// const checkBox = document.querySelector(".checkbox");
// console.log(checkBox);

// checkBox.onchange = (event) => {
//   const target = event.target; // === ElementNode
//   const isChecked = target.checked; // Gi√° tr·ªã c·ªßa input element

//   console.log(isChecked);
// };

// ‚≠ê L√†m vi·ªác v·ªõi select input

// const ctyList = document.querySelector(".ctyList");
// console.log(ctyList);

// ctyList.onchange = (event) => {
//   const target = event.target; // === ElementNode
//   const value = target.value;

//   console.log(value);
// };

// ‚≠ê PreventDefault and StopPropagation:

// üåª PreventDefault: // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh

/* const aElement = document.querySelectorAll(".link");

for (let i = 0; i < aElement.length; i++) {
  const element = aElement[i];
  element.onclick = (event) => {
    if (event.currentTarget.href.startsWith("https://chatgpt")) {
      event.preventDefault();
    }
  };
} */

/* const ulElement = document.querySelector("#nameList");

ulElement.onmousedown = (event) => {
  event.preventDefault();
};

ulElement.onclick = (event) => {
  console.log(event.target);
}; */

// üåª StopPropagation: // NgƒÉn ch·∫∑n s·ª± ki·ªán lan truy·ªÅn

/* const flower = document.querySelector(".flower");

flower.onclick = () => {
  console.log("Xin Ch√†o üíï");
};

const btnCtrl = document.querySelector(".btn-ctrl");

btnCtrl.onclick = (event) => {
    event.stopPropagation();
  console.log("Ng√†y vui v·∫ª üòéüòé");
}; */

// ‚≠ê Event Listeners : L·∫Øng nghe s·ª± ki·ªán

const btn = document.querySelector(".btn-ctrl");
// console.log(btn);

// üåª X·ª≠ l√Ω s·ª± ki·ªán v·ªõi DOM Event

/* btn.onclick = () => {
  console.log("Vi·ªác 1");
  console.log("Vi·ªác 2");
  alert("Ch√†o M·ª´ng üòéüòé");
};

setTimeout(() => {
  btn.onclick = () => {};
}, 3000); */

// üåª X·ª≠ l√Ω s·ª± ki·ªán v·ªõi Event Listeners

const alertMessage = () => {
  alert("Ch√†o H·∫° Trang üåªüåª");
};

btn.addEventListener("click", alertMessage);

setTimeout(() => {
  btn.removeEventListener("click", alertMessage);
}, 300000);
