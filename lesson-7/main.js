/**
1.‚≠ê Primitive Types (Ki·ªÉu nguy√™n th·ªßy):
 * Number: D√πng ƒë·ªÉ bi·ªÉu di·ªÖn c√°c gi√° tr·ªã s·ªë, v√≠ d·ª•: 42, 3.14.
 * String: D√πng ƒë·ªÉ bi·ªÉu di·ªÖn c√°c chu·ªói k√Ω t·ª±, v√≠ d·ª•: "Hello, World!".
 * Boolean: D√πng ƒë·ªÉ bi·ªÉu di·ªÖn hai gi√° tr·ªã ƒë√∫ng (true) ho·∫∑c sai (false).
 * Null: D√πng ƒë·ªÉ bi·ªÉu di·ªÖn gi√° tr·ªã "r·ªóng" ho·∫∑c "kh√¥ng t·ªìn t·∫°i".
 * Undefined: D√πng ƒë·ªÉ bi·ªÉu di·ªÖn gi√° tr·ªã ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.
 * Symbol: ƒê∆∞·ª£c gi·ªõi thi·ªáu trong ECMAScript 6 (ES6), d√πng ƒë·ªÉ bi·ªÉu di·ªÖn c√°c gi√° tr·ªã duy nh·∫•t v√† b·∫•t bi·∫øn.
 *
2.‚≠ê Non-Primitive Types (Ki·ªÉu kh√¥ng nguy√™n th·ªßy):
* Object: D√πng ƒë·ªÉ bi·ªÉu di·ªÖn c√°c ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ ch·ª©a nhi·ªÅu gi√° tr·ªã d∆∞·ªõi d·∫°ng c√°c c·∫∑p key-value.
* V√≠ d·ª•: { name: "John", age: 30 }.
* Array: L√† m·ªôt lo·∫°i ƒë·ªëi t∆∞·ª£ng ƒë·∫∑c bi·ªát d√πng ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch c√°c gi√° tr·ªã,
* V√≠ d·ª•: [1, 2, 3, 4].
* Function: C≈©ng l√† m·ªôt lo·∫°i ƒë·ªëi t∆∞·ª£ng nh∆∞ng c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi ho·∫∑c th·ª±c thi,
* V√≠ d·ª•: function greet() { console.log("Hello"); }.

 */
// ‚≠ê Primitive Types (Ki·ªÉu nguy√™n th·ªßy):
// Number
// var age = 15;
// var pi = 3.14159;

// // String
// var name = "Alice";
// var greeting = "Hello, World!";

// // Boolean
// var isStudent = true;
// var isLoggedIn = false;

// // Null
// var emptyValue = null;

// // Undefined
// var notAssigned;

// // Symbol
// var uniqueID = Symbol("id");

// ‚≠ê Non-Primitive Types (Ki·ªÉu kh√¥ng nguy√™n th·ªßy):
// Object
var person = {
  name: "Bob",
  age: 25,
  isStudent: true,
  getName: function () {
    return this.name;
  },
  setName: function (name) {
    this.name = name;
  },
};
var num = 123;
var name = "Bob";

// // Array
// var numbers = [1, 2, 3, 4, 5];

// // Function
// function greet() {
//   console.log("Hello!");
// }

// // 3.‚≠ê Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu:

// console.log(typeof age); // "number"
// console.log(typeof greeting); // "string"
// console.log(typeof isStudent); // "boolean"
// console.log(typeof emptyValue); // "object" (l√† l·ªói thi·∫øt k·∫ø trong JavaScript)
// console.log(typeof notAssigned); // "undefined"
// console.log(typeof uniqueID); // "symbol"
// console.log(typeof person); // "object"
// console.log(typeof numbers); // "object"
// console.log(typeof greet); // "function"'

// Khi g·ªçi m·ªôt ph∆∞∆°ng th·ª©c c·∫ßn ghi nh·ªõ:
//‚≠ê C√≥ nh·∫≠n tham s·ªë kh√¥ng?
//   C√≥ nh·∫≠n tham s·ªë
//‚≠ê Nh·∫≠n v√†o m·∫•y tham s·ªë?
//   C√≥ th·ªÉ nh·∫≠n m·ªôt ho·∫∑c hai tham s·ªë
//‚≠ê N·∫øu kh√¥ng truy·ªÅn tham s·ªë v√†o:
// * N√≥ ho·∫°t ƒë·ªông ? Tr·∫£ v·ªÅ c√°i g√¨?
//‚≠ê N·∫øu truy·ªÅn v√†o m·ªôt tham s·ªë:
// * N√≥ ho·∫°t ƒë·ªông nh∆∞ n√†o? Tr·∫£ v·ªÅ c√°i g√¨?
//‚≠ê N·∫øu truy·ªÅn v√†o ƒë·ªß tham s·ªë:
// * N√≥ ho·∫°t ƒë·ªông nh∆∞ n√†o? Tr·∫£ v·ªÅ c√°i g√¨?
//‚≠ê N·∫øu tham s·ªë kh√¥ng ƒë√∫ng (kh√¥ng t·ªìn t·∫°i) tr·∫£ v·ªÅ c√°i g√¨?

// L√ÄM VI·ªÜC V·ªöI CHU·ªñI String:

var fullName = "H·∫° \nTrang"; // Khai b√°o m·ªôt chu·ªói
console.log(fullName);
// Mu·ªën ch√®n k√Ω t·ª± ƒë·∫∑c bi·ªát th√¨ d√πng d·∫•u "\"
// D√πng "\" nh∆∞ n√†o?
// "\n d√πng ƒë·ªÉ hi·ªÉn th·ªã xu·ªëng d√≤ng"

var firstName = "Nguyen";
var lastName = "Trang";

// N·ªëi chu·ªói b·∫±ng d·∫•u backtick (`${}`)
console.log(`Toi l√† ${firstName} ${lastName}`);
console.log(`Toi l√† ${firstName + lastName}`);
console.log(`Toi l√†: ${firstName + ` Thi Thu ${lastName}`}`);
// `${}` Tr·∫£ v·ªÅ: type String

var fullName1 = "H·∫° Trang";
console.log(fullName1.length);
// Ki·ªÉm tra ƒë·ªô d√†i chu·ªói b·∫±ng thu·ªôc t√≠nh length
// fullName1.length tr·∫£ v·ªÅ s·ªë k√Ω t·ª± c√≥ trong chu·ªói
// t√≠nh c·∫£ kho·∫£ng tr·∫Øng

var myString1 = "Xuan Bao Bao";
console.log(myString1.indexOf("Bao"));
// indexOf T√¨m v·ªã tr√≠ c·ªßa chu·ªói con ho·∫∑c k√Ω t·ª±
// trong m·ªôt chu·ªói myString1.indexOf("Bao")

// C√≥ th·ªÉ nh·∫≠n m·ªôt ho·∫∑c hai tham s·ªë
// Nh·∫≠n m·ªôt tham s·ªë l√† chu·ªói con ho·∫∑c k√Ω t·ª± chu·ªói
// Ph∆∞∆°ng th·ª©c indexOf tr·∫£ v·ªÅ index (ki·ªÉu Number) c·ªßa k√Ω t·ª±
// ƒë·∫ßu ti√™n c·ªßa chu·ªói con m√† n√≥ t√¨m ƒë∆∞·ª£c trong chu·ªói myString1
// N·∫øu chu·ªói con ho·∫∑c k√Ω t·ª± kh√¥ng t·ªìn t·∫°i trong myString1 th√¨ tr·∫£ v·ªÅ -1

console.log(myString1.indexOf("B", 7));
// Nh·∫≠n v√†o hai ƒë·ªëi s·ªë: ƒë·ªëi s·ªë 1 l√† m·ªôt k√Ω t·ª± ho·∫∑c chu·ªói
// ƒë·ªëi s·ªë th·ª© 2 l√† v·ªã tr√≠ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm
// N·∫øu t√¨m th·∫•y s·∫Ω tr·∫£ v·ªÅ v·ªã tr√≠ ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c
// N·∫øu kh√¥ng t√¨m th·∫•y s·∫Ω tr·∫£ v·ªÅ -1

console.log(myString1.lastIndexOf("Bao"));
// Ph∆∞∆°ng th·ª©c lastIndexOf T√¨m v√≠ tr√≠ chu·ªói con ho·∫∑c
// k√Ω t·ª± cu·ªëi c√πng l·∫∑p l·∫°i trong chu·ªói myString1
// Nh·∫≠n m·ªôt tham s·ªë l√† chu·ªói con ho·∫∑c k√Ω t·ª± chu·ªói
// Tr·∫£ v·ªÅ index c·ªßa chu·ªói con ho·∫∑c k√Ω t·ª± chu·ªói
//üü¢ (chu·ªói con ho·∫∑c k√Ω t·ª± chu·ªói cu·ªëi c√πng trong k·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c)
// N·∫øu kh√¥ng t√¨m th·∫•y s·∫Ω tr·∫£ v·ªÅ -1

console.log(myString1.search(/Bao/g));
// T∆∞∆°ng t·ª± lastIndexOf: tr·∫£ v·ªÅ (cu·ªëi c√πng)
// Nh·∫≠n m·ªôt tham s·ªë l√† m·ªôt bi·ªÉu th·ª©c ch√≠nh quy (search)
// Tr·∫£ v·ªÅ index c·ªßa chu·ªói con ho·∫∑c k√Ω t·ª± chu·ªói
// N·∫øu kh√¥ng t√¨m th·∫•y s·∫Ω tr·∫£ v·ªÅ: -1

var myString2 = "Xuan Bao";
// Ph∆∞∆°ng th·ª©c slice: d√πng ƒë·ªÉ c·∫Øt k√Ω t·ª± trong chu·ªói myString2.
// C·∫Øt t·ª´ tr√°i sang ph·∫£i: th√¨ truy·ªÅn v√†o s·ªë d∆∞∆°ng.
// C·∫Øt t·ª´ ph·∫£i sang tr√°i: th√¨ truy·ªÅn v√†o s·ªë √¢m.
// slice C√≥ th·ªÉ nh·∫≠n m·ªôt ho·∫∑c hai tham s·ªë:
// Tham s·ªë 1 v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·∫Øt
// Tham s·ªë 2 v·ªã tr√≠ k·∫øt th√∫c (üü¢ Kh√¥ng bao g·ªìm v·ªã tr√≠ k·∫øt th√∫c)

console.log(myString2.slice(0, 5));
// Khi ch·ªâ truy·ªÅn 1 tham s·ªë th√¨ ƒë√≥ l√† v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·∫Øt v√† c·∫Øt cho ƒë·∫øn h·∫øt chu·ªói.
// V√≠ d·ª•: truy·ªÅn s·ªë 0 v√†o th√¨ s·∫Ω c·∫Øt t·ª´ ƒë·∫ßu ƒë·∫øn h·∫øt (üü¢c√≥ th·ªÉ d√πng ƒë·ªÉ copy chu·ªói)
// Ph∆∞∆°ng th·ª©c slice - Tr·∫£ v·ªÅ: chu·ªói ƒë√£ b·ªã c·∫Øt
// N·∫øu kh√¥ng c√≥ index ƒë√≥ trong chu·ªói s·∫Ω tr·∫£ v·ªÅ m·ªôt chu·ªói r·ªóng

var myString3 = "Nguyen Thu Trang";
console.log(myString3.replace("Thu", "H·∫°"));
// Ph∆∞∆°ng th·ª©c replace s·∫Ω thay th·∫ø tham s·ªë 1 b·∫±ng tham s·ªë 2
// Ch·ªâ nh·∫≠n hai tham s·ªë
// Ghi ƒë√® k√Ω t·ª± (chu·ªói con) ƒë·∫ßu ti√™n m√† n√≥ g·∫∑p trong chu·ªói myString3
// Ph∆∞∆°ng th·ª©c replace tr·∫£ v·ªÅ: chu·ªói m·ªõi ƒë√£ ghi ƒë√® k√Ω t·ª± (chu·ªói con)

var string3 = "Nguyen Thu Trang Trang Trang";
console.log(string3.replace(/Trang/g, "Xu√¢n B·∫£o"));
// Khi mu·ªën thay th·∫ø nhi·ªÅu k√Ω t·ª± l·∫∑p l·∫°i th√¨ ta s·ª≠ d·ª•ng bi·ªÉu th·ª©c ch√≠nh quy
// Ph∆∞∆°ng th·ª©c replace tr·∫£ v·ªÅ: chu·ªói m·ªõi ƒë√£ ghi ƒë√® k√Ω t·ª± (chu·ªói con)

var myString4 = "Xuan Bao";
console.log(myString4.toUpperCase());
// Ph∆∞∆°ng th·ª©c toUpperCase s·∫Ω tr·∫£ v·ªÅ chu·ªói vi·∫øt th√†nh ch·ªØ in hoa

var myString5 = "Xuan Bao";
console.log(myString5.toLowerCase());
// Ph∆∞∆°ng th·ª©c toLowerCase s·∫Ω tr·∫£ v·ªÅ chu·ªói vi·∫øt th√†nh ch·ªØ th∆∞·ªùng

var myString6 = "      Xuan Bao    ";
console.log(myString6.trim());
// D√πng ƒë·ªÉ lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a ·ªü hai ƒë·∫ßu c·ªßa chu·ªói.
// Ph∆∞∆°ng th·ª©c trim() tr·∫£ v·ªÅ: chu·ªói ƒë√£ lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü hai ƒë·∫ßu

// Convert string to Array:
var myString7 = "Xuan Bao, Ha Trang, Thu Trang";
console.log(myString7.split(", "));
// Ch·ªâ nh·∫≠n m·ªôt tham s·ªë. (string type)
// Ph∆∞∆°ng th·ª©c SPLIT quy ƒë·ªïi chu·ªói th√†nh ARRAY
// Ph·∫£i t√¨m ƒëi·ªÉm chung h·ª£p l√Ω ƒë·ªÉ c·∫Øt.
// split Tr·∫£ v·ªÅ m·∫£ng (Array): ["Xuan Bao", "Ha Trang", "Thu Trang"]

// L·∫•y ra gi√° tr·ªã chu·ªói t·∫°i v·ªã tr√≠ index ch·ªâ ƒë·ªãnh:
//C√°ch 1:
const myString8 = "Xuan Bao";
console.log(myString8.charAt(5));
// Ch·ªâ nh·∫≠n m·ªôt tham s·ªë (number type)
// Ph∆∞∆°ng th·ª©c charAt tr·∫£ v·ªÅ: gi√° tr·ªã chu·ªói t·∫°i v·ªã tr√≠ index ch·ªâ ƒë·ªãnh.
// Khi truy·ªÅn m·ªôt v·ªã tr√≠ kh√¥ng c√≥ th√¨ s·∫Ω tr·∫£ v·ªÅ m·ªôt chu·ªói r·ªóng

//C√°ch 2: Truy·ªÅn index v√†o c·∫∑p ngo·∫∑c []
const myString9 = "Xuan Bao";
console.log(myString9[5]);
// Ch·ªâ nh·∫≠n 1 tham s·ªë (number type)
// C√∫ ph√°p; "string" theo sau l√† c·∫∑p ngo·∫∑c [] v√† truy·ªÅn index v√†o.
// Khi truy·ªÅn m·ªôt v·ªã tr√≠ kh√¥ng c√≥ th√¨ s·∫Ω tr·∫£ v·ªÅ undefined

// L√ÄM VI·ªÜC V·ªöI S·ªê Number:

// Kh·ªüi t·∫°o m·ªôt s·ªë trong JavaScript:
// C√°ch 1: G√°n b√¨nh th∆∞·ªùng
var age = 15;
// C√°ch 2: Th√¥ng qua ƒë·ªëi t∆∞·ª£ng Number c·ªßa JS
var age1 = new Number(18);

// NaN trong JavaScript: (L√† m·ªôt s·ªë kh√¥ng ph·∫£i l√† s·ªë)
// Ph√©p t√≠nh kh√¥ng h·ª£p l·ªá tr·∫£ v·ªÅ NaN
var result = 20 / "ABC"; // NaN
// Type of v·∫´n tr·∫£ ra number
// Mu·ªën ki·ªÉm tra th√¨ ph·∫£i s·ª≠ d·ª•ng h√†m isNaN()
console.log(isNaN(result)); // true

// Convert Number to String:
var age = 15;
console.log(age.toString()); // => String
// Kh√¥ng truy·ªÅn tham s·ªë

// Round decimal numbers:
var PI = 3.14;
console.log(PI.toFixed());
// L√†m tr√≤n s·ªë th·∫≠p ph√¢n
// Tr·∫£ ra string
// L√†m tr√≤n ƒë·∫øn s·ªë g·∫ßn nh·∫•t, bi√™n ƒë·ªô 0.5

var PI1 = 3000.389702;
console.log(PI1.toFixed(2));
// C√≥ truy·ªÅn tham s·ªë
// C√≥ th·ªÉ nh·∫≠n m·ªôt tham s·ªë (number type)
// Tham s·ªë ƒë∆∞·ª£c truy·ªÅn ƒë·ªÉ quy ƒë·ªãnh s·ªë c√°c ch·ªØ s·ªë th·∫≠p ph√¢n.
// Tr·∫£ ra string mang gi√° s·ªë c√≥ ph·∫ßn th·∫≠p ph√¢n ƒë√£ r√∫t g·ªçn

// Ki·ªÉm tra xem gi√° tr·ªã c√≥ ph·∫£i l√† s·ªë h·ªØu h·∫°n hay kh√¥ng:
Number.isFinite(10); // true
// Ph∆∞∆°ng th·ª©c Number.isFinite() nh·∫≠n m·ªôt tham s·ªë (number type)
// Tr·∫£ v·ªÅ boolean (S·ªë h·ªØu h·∫°n: true, Kh√¥ng ph·∫£i s·ªë h·ªØu h·∫°n: false)

// L√ÄM VI·ªÜC V·ªöI M·∫¢NG (Array)

// Kh·ªüi t·∫°o m·ªôt Array: Create a new array
// C√°ch 1: G√°n b√¨nh th∆∞·ªùng
var number10 = ["100000", "875000", "3600"];

// C√°ch 2: Th√¥ng qua ƒë·ªëi t∆∞·ª£ng Array c·ªßa JS
var number11 = new Array("100", "947289", "728");

// C√°ch Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa Arr:
console.log(typeof number10); // Object
console.log(Array.isArray(number10)); // Boolean
console.log(number10 instanceof Array); // true
console.log({ a: 1 } instanceof Object); // true

// Ki·ªÉm tra ƒë·ªô d√†i m·∫£ng:
console.log(number11.length);
// Tr·∫£ v·ªÅ tr·∫£ v·ªÅ s·ªë ph·∫ßn t·ª≠ c√≥ trong m·∫£ng

// L·∫•y ph·∫ßn t·ª≠ theo index:
console.log(number10[1]);
// Vi·∫øt Arr ti·∫øp theo l√† [] v√† truy·ªÅn number v√†o []
// Tr·∫£ v·ªÅ: ph·∫ßn t·ª≠ ƒë∆∞·ª£c l·∫•y

// Convert m·∫£ng sang string:
var languages = ["JavaScript", "PHP", "Ruby"];
var newLanguages = languages.toString();
// Kh√¥ng nh·∫≠n tham s·ªë
//üü¢ Tr·∫£ v·ªÅ: "JavaScript,PHP,Ruby"
//üî¥ T√¥i mu·ªën sau m·ªói d·∫•u ph·∫©y c√≥ d·∫•u c√°ch ?
console.log(newLanguages.replace(/,/g, ", ")); // => String

console.log(languages.join(" - ")); // => String
// Thay ƒë·ªïi d·∫•u ',' m·∫∑c ƒë·ªãnh th√†nh m·ªôt d·∫•u kh√°c
//üü¢ C√≥ th·ªÉ nh·∫≠n tham s·ªë:

var languages1 = ["JavaScript", "PHP", "Ruby"];
console.log(languages1.pop());
console.log(languages1);
// Kh√¥ng nh·∫≠n tham s·ªë
// X√≥a elements cu·ªëi m·∫£ng v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë√£ x√≥a (string)
//üü¢ Khi m·∫£ng tr·ªëng ph∆∞∆°ng th·ª©c pop() s·∫Ω tr·∫£ v·ªÅ undefined
//üü¢ [].pop() === undefined;

var languages2 = ["JavaScript", "PHP", "Ruby"];
console.log(languages2.push("Dart", "Java"));
// Th√™m m·ªôt ho·∫∑c nhi·ªÅu elements v√†o cu·ªëi m·∫£ng
// C√≥ truy·ªÅn tham s·ªë v√† c√≥ th·ªÉ truy·ªÅn m·ªôt ho·∫∑c nhi·ªÅu tham s·ªë
// Tr·∫£ v·ªÅ ƒë·ªô d√†i m·ªõi c·ªßa m·∫£ng sau khi th√™m ph·∫ßn t·ª≠

var languages3 = ["JavaScript", "PHP", "Ruby"];

console.log(languages3.shift()); // "JavaScript"
console.log(languages3); // ["PHP", "Ruby"]
// Kh√¥ng nh·∫≠n tham s·ªë
// X√≥a elements ƒë·∫ßu m·∫£ng v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë√£ x√≥a
// Khi m·∫£ng tr·ªëng m√† s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c shift s·∫Ω tr·∫£ v·ªÅ undefined
//üü¢ [].shift() === undefined;

var languages4 = ["JavaScript", "PHP", "Ruby"];
console.log(languages4.unshift("Dart"));
console.log(languages4);
// C√≥ nh·∫≠n m·ªôt ho·∫∑c nhi·ªÅu tham s·ªë
// Th√™m m·ªôt ho·∫∑c nhi·ªÅu elements v√†o ƒë·∫ßu m·∫£ng v√† tr·∫£ v·ªÅ ƒë·ªô d√†i m·ªõi

var languages5 = ["JavaScript", "PHP", "Ruby"];
// languages5.splice();
console.log(languages5.splice()); // languages5.splice(5)
// Kh√¥ng truy·ªÅn g√¨ ho·∫∑c truy·ªÅn s·ªë kh√¥ng ph·∫£i l√† index trong m·∫£ng: splice kh√¥ng l√†m g√¨ c·∫£ v√† tr·∫£ v·ªÅ m·∫£ng r·ªóng.
console.log(languages5.splice(0));
// N·∫øu truy·ªÅn M·ªòT ƒë·ªëi s·ªë: Th√¨ b·∫Øt ƒë·∫ßu x√≥a t·ª´ v·ªã tr√≠ index t∆∞∆°ng ·ª©ng cho ƒë·∫øn h·∫øt element trong m·∫£ng // Tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c element ƒë√£ x√≥a.

console.log(languages5.splice(0, 1));
// N·∫øu truy·ªÅn hai ƒë·ªëi s·ªë:
// ƒê·ªëi s·ªë 1: X√°c ƒë·ªãnh v·ªã tr√≠ b·∫Øt ƒë·∫ßu x√≥a.
// ƒê·ªëi s·ªë 2: Quy·∫øt ƒë·ªãnh x√≥a bao nhi√™u element.

var languages6 = ["JavaScript", "PHP", "Ruby"];
languages6.splice(1, 0, ["Java"], "Dart", 18, { name: "HaTrang" });
console.log(languages6);
// N·∫øu truy·ªÅn t·ª´ ba ƒë·ªëi s·ªë tr·ªü l√™n th√¨ t·ª´ ƒë·ªëi s·ªë th·ª© ba s·∫Ω l√† elements ƒë∆∞·ª£c ch√®n v√†o m·∫£ng.
// Ch√®n th√™m 1 ho·∫∑c nhi·ªÅu element v√†o m·∫£ng
// Tham s·ªë 1: v·ªã tr√≠ ch√®n
// Tham s·ªë 2: quy·∫øt ƒë·ªãnh x√≥a bao nhi√™u El?

// Ph∆∞∆°ng th·ª©c concat: H·ª£p nh·∫•t M·∫£ng.
var myFamily = ["Xu√¢n Ph√°o", "Trang Ch√≠p", "Trang C√∫n"];
console.log(myFamily.concat(languages6));
// myFamily.concat(languages6) === ["Xu√¢n Ph√°o", "Trang Ch√≠p", "Trang C√∫n", "JavaScript", "PHP", "Ruby"];
// C√≥ th·ªÉ nh·∫≠n m·ªôt ho·∫∑c nhi·ªÅu tham s·ªë
// N·ªëi ƒë∆∞·ª£c c√°c array v·ªõi nhau
// M·∫£ng g·ªçi ƒë·∫øn ph∆∞∆°ng th·ª©c concat l√† m·∫£ng g·ªëc v√† m·∫£ng ƒë∆∞·ª£c truy·ªÅn v√†o l√† m·∫£ng ƒë∆∞·ª£c h·ª£p nh·∫•t v·ªõi m·∫£ng g·ªëc
// M·∫£ng ƒë√£ h·ª£p nh·∫•t.

var languages8 = ["JavaScript", "PHP", "Ruby"];
console.log(languages8.slice(1, 2));
//üü¢ T∆∞∆°ng t·ª± v·ªõi ph∆∞∆°ng th·ª©c slice("Chu·ªói")
// Khi ch·ªâ truy·ªÅn 1 tham s·ªë th√¨ ƒë√≥ l√† v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·∫Øt v√† c·∫Øt cho ƒë·∫øn h·∫øt m·∫£ng.
// V√≠ d·ª•: truy·ªÅn s·ªë 0 v√†o th√¨ s·∫Ω c·∫Øt t·ª´ ƒë·∫ßu ƒë·∫øn h·∫øt (üü¢c√≥ th·ªÉ d√πng ƒë·ªÉ copy m·∫£ng)
// Ph∆∞∆°ng th·ª©c slice - Tr·∫£ v·ªÅ: M·∫£ng elements ƒë√£ c·∫Øt
// N·∫øu kh√¥ng c√≥ index ƒë√≥ trong m·∫£ng s·∫Ω tr·∫£ v·ªÅ m·ªôt m·∫£ng r·ªóng

// L√ÄM VI·ªÜC V·ªöI OBJECT (ƒê·ªëi t∆∞·ª£ng)

var myInfo = {
  name: "Ha Trang",
  age: 15,
  address: "Ha Noi, VN",
};

// Th√™m m·ªôt c·∫∑p key v√† value sau khi object ƒë∆∞·ª£c t·∫°o:

myInfo.fullName = "Xu√¢n B·∫£o"; // Th√™m fullName v√†o myInfo
console.log(myInfo);

var myInfo1 = {
  name: "Ha Trang",
  age: 15,
  address: "Ha Noi, VN",
};
// L·∫•y 1 value ra ngo√†i
// C√°ch 1:
console.log(myInfo1.name); // "Ha Trang"

console.log(myInfo1["email"]); // undefined
// Khi l·∫•y m·ªôt c√°i key kh√¥ng c√≥ trong Obj s·∫Ω tr·∫£ v·ªÅ undefined
// C√°ch 2:
console.log(myInfo1["age"]);

var myInfo2 = {
  name: "Ha Trang",
  age: 15,
  address: "Ha Noi, VN",
};

var myKey = "address";
console.log(myInfo2[myKey]);
// L·∫•y value th√¥ng qua bi·∫øn thay key
// (bi·∫øn ph·∫£i ƒë∆∞·ª£c g√°n gi√° tr·ªã tr√πng t√™n key c·ªßa Obj)

var emailKey = "email";
var myInfo4 = {
  name: "Ha Trang",
  age: 15,
  address: "Ha Noi, VN",
  [emailKey]: "Thu Trang",
};
console.log(myInfo4);
// ƒê·ªãnh nghƒ©a, th√™m 1 key m·ªõi b·∫±ng m·ªôt bi·∫øn.

var myInfo5 = {
  name: "Ha Trang",
  age: 15,
  address: "Ha Noi, VN",
};
delete myInfo5.age;
console.log(myInfo5);
// X√≥a ƒëi m·ªôt c·∫∑p key v√† value trong object
// X√≥a h·∫øt c√°c c·∫∑p key v√† value trong object
// th√¨ s·∫Ω tr·∫£ ra object tr·ªëng

var myInfo6 = {
  firstName: "Ha Trang",
  lastName: "Nguy·ªÖn ",
  age: 15,
  address: "Ha Noi, VN",
  gender: "N·ªØ",

  getName: function () {
    const fullNames = this.lastName + this.firstName;
    return fullNames;
  },
};
const tenCuaToi = myInfo6.getName();
console.log(tenCuaToi);

// Object constructor : Tr√¨nh t·∫°o ƒë·ªëi t∆∞·ª£ng

// constructor
function MyFamily(name, age, gender, bio) {
  this.firstName = name;
  this.lastName = "Nguy·ªÖn ";
  this.age = age;
  this.gender = gender;
  this.bio = bio;
  this.height = "1.5m";

  this.getName = function () {
    const fullNames = this.lastName + this.firstName;
    return fullNames;
  };
  this.setName = function () {
    const fullNames = this.lastName + this.firstName;
    return fullNames;
  };
}

var thuTrang = new MyFamily("Thu Trang", 23, "female", "m√†u t√≠m");
thuTrang["height"] = "1.58m";
console.log(thuTrang, thuTrang.getName());

var haTrang = new MyFamily("Ha Trang", 13, "female", "m√†u h·ªìng");
haTrang.canNang = "54kg";
haTrang.height = "1.68m";
haTrang.setHeight = (height) => {
  if (height) {
    haTrang.height = height;
  } else {
    haTrang.height = "1m";
  }
};

haTrang.setHeight();

console.log(haTrang, haTrang.getName());

var phao = new MyFamily("Ph√°o Xu√¢n", 6, "men", "m√†u ƒê·ªè");
phao.height = "0.99m";
console.log(phao, phao.getName());

// Object prototype :

function MyFamily12(name, age, gender, bio) {
  this.firstName = name;
  this.age = age;
  this.gender = gender;
  this.bio = bio;

  this.getName = function () {
    const fullNames = this.lastName + this.firstName;
    return fullNames;
  };
}

MyFamily12.prototype.height = "1.6m";

var chiToi = new MyFamily12("Thu Trang", 23, "N·ªØ", "m√†u v√†ng");
var itsMe = new MyFamily12("H·∫° Trang", 15, "N·ªØ", "m√†u xanh");

console.log(chiToi.height);
console.log(itsMe);
